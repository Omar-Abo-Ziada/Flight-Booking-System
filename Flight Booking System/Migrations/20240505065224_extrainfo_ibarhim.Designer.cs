// <auto-generated />
using System;
using Flight_Booking_System.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Flight_Booking_System.Migrations
{
    [DbContext(typeof(ITIContext))]
    [Migration("20240505065224_extrainfo_ibarhim")]
    partial class extrainfo_ibarhim
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Flight_Booking_System.Models.AirLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AirlineNumber")
                        .HasColumnType("int");

                    b.Property<int?>("AirportId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AirportId");

                    b.ToTable("AirLines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AirlineNumber = 5,
                            AirportId = 1,
                            Name = "EgyptAirs"
                        },
                        new
                        {
                            Id = 2,
                            AirlineNumber = 10,
                            AirportId = 2,
                            Name = "Lufthansa"
                        },
                        new
                        {
                            Id = 3,
                            AirlineNumber = 15,
                            AirportId = 3,
                            Name = "Qantas"
                        },
                        new
                        {
                            Id = 4,
                            AirlineNumber = 20,
                            AirportId = 4,
                            Name = "Emirates"
                        },
                        new
                        {
                            Id = 5,
                            AirlineNumber = 25,
                            AirportId = 5,
                            Name = "Delta"
                        },
                        new
                        {
                            Id = 6,
                            AirlineNumber = 30,
                            AirportId = 6,
                            Name = "British Airways"
                        },
                        new
                        {
                            Id = 7,
                            AirlineNumber = 35,
                            AirportId = 7,
                            Name = "Air France"
                        },
                        new
                        {
                            Id = 8,
                            AirlineNumber = 40,
                            AirportId = 8,
                            Name = "American Airlines"
                        },
                        new
                        {
                            Id = 9,
                            AirlineNumber = 45,
                            AirportId = 9,
                            Name = "United Airlines"
                        },
                        new
                        {
                            Id = 10,
                            AirlineNumber = 50,
                            AirportId = 10,
                            Name = "Singapore Airlines"
                        });
                });

            modelBuilder.Entity("Flight_Booking_System.Models.AirPort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AirPortNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("AirPorts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AirPortNumber = 1,
                            Name = "Cairo AirPort"
                        },
                        new
                        {
                            Id = 2,
                            AirPortNumber = 2,
                            Name = "Frankfurt AirPort"
                        },
                        new
                        {
                            Id = 3,
                            AirPortNumber = 3,
                            Name = "Sydney AirPort"
                        },
                        new
                        {
                            Id = 4,
                            AirPortNumber = 4,
                            Name = "Dubai AirPort"
                        },
                        new
                        {
                            Id = 5,
                            AirPortNumber = 5,
                            Name = "Atlanta AirPort"
                        },
                        new
                        {
                            Id = 6,
                            AirPortNumber = 6,
                            Name = "Heathrow Airport"
                        },
                        new
                        {
                            Id = 7,
                            AirPortNumber = 7,
                            Name = "Charles de Gaulle Airport"
                        },
                        new
                        {
                            Id = 8,
                            AirPortNumber = 8,
                            Name = "Los Angeles International Airport"
                        },
                        new
                        {
                            Id = 9,
                            AirPortNumber = 9,
                            Name = "O'Hare International Airport"
                        },
                        new
                        {
                            Id = 10,
                            AirPortNumber = 10,
                            Name = "Changi Airport"
                        });
                });

            modelBuilder.Entity("Flight_Booking_System.Models.ApplicationUSer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Flight_Booking_System.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = 2,
                            Name = "USA"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Japan"
                        },
                        new
                        {
                            Id = 6,
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 7,
                            Name = "France"
                        },
                        new
                        {
                            Id = 8,
                            Name = "United States"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Qatar"
                        });
                });

            modelBuilder.Entity("Flight_Booking_System.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AirLineId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DestinationId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<int?>("PlaneId")
                        .HasColumnType("int");

                    b.Property<int?>("StartId")
                        .HasColumnType("int");

                    b.Property<string>("imageURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AirLineId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("PlaneId");

                    b.HasIndex("StartId");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArrivalTime = new DateTime(2024, 12, 25, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 12, 25, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            DestinationId = 1,
                            Duration = new TimeSpan(0, 6, 15, 0, 0),
                            PlaneId = 1,
                            StartId = 1
                        },
                        new
                        {
                            Id = 2,
                            ArrivalTime = new DateTime(2024, 12, 30, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 12, 30, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationId = 2,
                            Duration = new TimeSpan(0, 6, 0, 0, 0),
                            PlaneId = 2,
                            StartId = 2
                        },
                        new
                        {
                            Id = 3,
                            ArrivalTime = new DateTime(2024, 11, 15, 12, 15, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 11, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationId = 3,
                            Duration = new TimeSpan(0, 3, 15, 0, 0),
                            PlaneId = 3,
                            StartId = 3
                        },
                        new
                        {
                            Id = 4,
                            ArrivalTime = new DateTime(2024, 12, 25, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 12, 25, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            DestinationId = 4,
                            Duration = new TimeSpan(0, 6, 15, 0, 0),
                            PlaneId = 5,
                            StartId = 4
                        },
                        new
                        {
                            Id = 5,
                            ArrivalTime = new DateTime(2024, 12, 30, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 12, 30, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationId = 5,
                            Duration = new TimeSpan(0, 6, 0, 0, 0),
                            PlaneId = 6,
                            StartId = 5
                        },
                        new
                        {
                            Id = 6,
                            ArrivalTime = new DateTime(2024, 11, 15, 12, 15, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 11, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationId = 6,
                            Duration = new TimeSpan(0, 3, 15, 0, 0),
                            PlaneId = 7,
                            StartId = 6
                        });
                });

            modelBuilder.Entity("Flight_Booking_System.Models.Passenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("FlightId")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsChild")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.HasIndex("TicketId")
                        .IsUnique()
                        .HasFilter("[TicketId] IS NOT NULL");

                    b.ToTable("Passengers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 22,
                            Gender = 1,
                            IsChild = false,
                            Name = "Joy",
                            NationalId = "302245",
                            PassportNum = "52546874",
                            TicketId = 1
                        },
                        new
                        {
                            Id = 2,
                            Age = 30,
                            Gender = 0,
                            IsChild = false,
                            Name = "Bob",
                            NationalId = "547289",
                            PassportNum = "63546844",
                            TicketId = 2
                        },
                        new
                        {
                            Id = 3,
                            Age = 27,
                            Gender = 1,
                            IsChild = false,
                            Name = "Alice",
                            NationalId = "223456",
                            PassportNum = "48567234",
                            TicketId = 3
                        },
                        new
                        {
                            Id = 4,
                            Age = 12,
                            Gender = 0,
                            IsChild = true,
                            Name = "Charlie",
                            NationalId = "567890",
                            PassportNum = "58694230",
                            TicketId = 4
                        },
                        new
                        {
                            Id = 5,
                            Age = 45,
                            Gender = 1,
                            IsChild = false,
                            Name = "Diana",
                            NationalId = "987654",
                            PassportNum = "11223344",
                            TicketId = 5
                        },
                        new
                        {
                            Id = 6,
                            Age = 35,
                            Gender = 0,
                            IsChild = false,
                            Name = "John",
                            NationalId = "789012",
                            PassportNum = "77889900",
                            TicketId = 6
                        },
                        new
                        {
                            Id = 7,
                            Age = 29,
                            Gender = 1,
                            IsChild = false,
                            Name = "Sophia",
                            NationalId = "567890",
                            PassportNum = "11223344",
                            TicketId = 7
                        },
                        new
                        {
                            Id = 8,
                            Age = 45,
                            Gender = 0,
                            IsChild = false,
                            Name = "William",
                            NationalId = "345678",
                            PassportNum = "55667788",
                            TicketId = 8
                        },
                        new
                        {
                            Id = 9,
                            Age = 8,
                            Gender = 1,
                            IsChild = true,
                            Name = "Olivia",
                            NationalId = "456789",
                            PassportNum = "99001122",
                            TicketId = 9
                        },
                        new
                        {
                            Id = 10,
                            Age = 55,
                            Gender = 0,
                            IsChild = false,
                            Name = "James",
                            NationalId = "234567",
                            PassportNum = "33445566",
                            TicketId = 10
                        });
                });

            modelBuilder.Entity("Flight_Booking_System.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("Places");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            StateId = 1
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            StateId = 2
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            StateId = 3
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            StateId = 4
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 2,
                            StateId = 5
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 6,
                            StateId = 6
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 6,
                            StateId = 7
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 6,
                            StateId = 8
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 7,
                            StateId = 9
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 7,
                            StateId = 10
                        });
                });

            modelBuilder.Entity("Flight_Booking_System.Models.Plane", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Engine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FlightId")
                        .HasColumnType("int");

                    b.Property<float?>("Height")
                        .HasColumnType("real");

                    b.Property<float?>("Length")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("WingSpan")
                        .HasColumnType("real");

                    b.Property<int>("capacity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.ToTable("Planes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Engine = "CFM56-7B",
                            Height = 41f,
                            Length = 110f,
                            Name = "Boeing 737",
                            WingSpan = 117f,
                            capacity = 188
                        },
                        new
                        {
                            Id = 2,
                            Engine = "CFM56-5B4",
                            Height = 39f,
                            Length = 123f,
                            Name = "Airbus A320",
                            WingSpan = 117f,
                            capacity = 180
                        },
                        new
                        {
                            Id = 3,
                            Engine = "GE90-115B",
                            Height = 61f,
                            Length = 242f,
                            Name = "Boeing 777",
                            WingSpan = 199f,
                            capacity = 396
                        },
                        new
                        {
                            Id = 4,
                            Engine = "Trent 900",
                            Height = 79f,
                            Length = 238f,
                            Name = "Airbus A380",
                            WingSpan = 261f,
                            capacity = 853
                        },
                        new
                        {
                            Id = 5,
                            Engine = "GEnx-1B",
                            Height = 56f,
                            Length = 206f,
                            Name = "Boeing 787",
                            WingSpan = 197f,
                            capacity = 242
                        },
                        new
                        {
                            Id = 6,
                            Engine = "Trent XWB",
                            Height = 56f,
                            Length = 227f,
                            Name = "Airbus A350",
                            WingSpan = 212f,
                            capacity = 325
                        },
                        new
                        {
                            Id = 7,
                            Engine = "CF6-80",
                            Height = 48f,
                            Length = 201f,
                            Name = "Boeing 767",
                            WingSpan = 156f,
                            capacity = 375
                        },
                        new
                        {
                            Id = 8,
                            Engine = "Trent 700",
                            Height = 58f,
                            Length = 63f,
                            Name = "Airbus A330",
                            WingSpan = 197f,
                            capacity = 440
                        },
                        new
                        {
                            Id = 9,
                            Engine = "RB211-535",
                            Height = 44f,
                            Length = 54f,
                            Name = "Boeing 757",
                            WingSpan = 38f,
                            capacity = 295
                        });
                });

            modelBuilder.Entity("Flight_Booking_System.Models.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("Section")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId")
                        .IsUnique()
                        .HasFilter("[TicketId] IS NOT NULL");

                    b.ToTable("Seats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Number = 1,
                            Section = 4
                        },
                        new
                        {
                            Id = 2,
                            Number = 2,
                            Section = 0
                        },
                        new
                        {
                            Id = 3,
                            Number = 3,
                            Section = 1
                        },
                        new
                        {
                            Id = 4,
                            Number = 4,
                            Section = 6
                        },
                        new
                        {
                            Id = 5,
                            Number = 5,
                            Section = 2
                        },
                        new
                        {
                            Id = 6,
                            Number = 6,
                            Section = 5
                        },
                        new
                        {
                            Id = 7,
                            Number = 7,
                            Section = 4
                        },
                        new
                        {
                            Id = 8,
                            Number = 8,
                            Section = 2
                        },
                        new
                        {
                            Id = 9,
                            Number = 9,
                            Section = 1
                        },
                        new
                        {
                            Id = 10,
                            Number = 10,
                            Section = 4
                        },
                        new
                        {
                            Id = 11,
                            Number = 11,
                            Section = 4
                        },
                        new
                        {
                            Id = 12,
                            Number = 12,
                            Section = 0
                        },
                        new
                        {
                            Id = 13,
                            Number = 13,
                            Section = 1
                        },
                        new
                        {
                            Id = 14,
                            Number = 14,
                            Section = 6
                        },
                        new
                        {
                            Id = 15,
                            Number = 15,
                            Section = 2
                        });
                });

            modelBuilder.Entity("Flight_Booking_System.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("PlaceId");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Cairo"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Alexandria"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Name = "Aswan"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            Name = "Texas"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 2,
                            Name = "California"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 6,
                            Name = "England"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 6,
                            Name = "Scotland"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 6,
                            Name = "Wales"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 7,
                            Name = "Île-de-France"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 7,
                            Name = "Provence-Alpes-Côte d'Azur"
                        });
                });

            modelBuilder.Entity("Flight_Booking_System.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.Property<int?>("FlightId")
                        .HasColumnType("int");

                    b.Property<int?>("PassengerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int?>("SeatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Class = 0,
                            FlightId = 1,
                            PassengerId = 1,
                            Price = 299.99m,
                            SeatId = 1
                        },
                        new
                        {
                            Id = 2,
                            Class = 1,
                            FlightId = 1,
                            PassengerId = 2,
                            Price = 499.99m,
                            SeatId = 2
                        },
                        new
                        {
                            Id = 3,
                            Class = 2,
                            FlightId = 2,
                            PassengerId = 3,
                            Price = 1299.99m,
                            SeatId = 3
                        },
                        new
                        {
                            Id = 4,
                            Class = 0,
                            FlightId = 2,
                            PassengerId = 4,
                            Price = 350.00m,
                            SeatId = 4
                        },
                        new
                        {
                            Id = 5,
                            Class = 1,
                            FlightId = 3,
                            PassengerId = 5,
                            Price = 850.00m,
                            SeatId = 5
                        },
                        new
                        {
                            Id = 6,
                            Class = 0,
                            FlightId = 4,
                            PassengerId = 6,
                            Price = 399.99m,
                            SeatId = 11
                        },
                        new
                        {
                            Id = 7,
                            Class = 1,
                            FlightId = 5,
                            PassengerId = 7,
                            Price = 599.99m,
                            SeatId = 12
                        },
                        new
                        {
                            Id = 8,
                            Class = 2,
                            FlightId = 6,
                            PassengerId = 8,
                            Price = 1399.99m,
                            SeatId = 13
                        },
                        new
                        {
                            Id = 9,
                            Class = 0,
                            FlightId = 4,
                            PassengerId = 9,
                            Price = 380.00m,
                            SeatId = 14
                        },
                        new
                        {
                            Id = 10,
                            Class = 1,
                            FlightId = 5,
                            PassengerId = 10,
                            Price = 900.00m,
                            SeatId = 15
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Flight_Booking_System.Models.AirLine", b =>
                {
                    b.HasOne("Flight_Booking_System.Models.AirPort", "AirPort")
                        .WithMany("AirLines")
                        .HasForeignKey("AirportId");

                    b.Navigation("AirPort");
                });

            modelBuilder.Entity("Flight_Booking_System.Models.Country", b =>
                {
                    b.HasOne("Flight_Booking_System.Models.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Flight_Booking_System.Models.Flight", b =>
                {
                    b.HasOne("Flight_Booking_System.Models.AirLine", "AirLine")
                        .WithMany("Flights")
                        .HasForeignKey("AirLineId");

                    b.HasOne("Flight_Booking_System.Models.Place", "Destination")
                        .WithMany("ArrivingFlights")
                        .HasForeignKey("DestinationId");

                    b.HasOne("Flight_Booking_System.Models.Plane", "Plane")
                        .WithMany()
                        .HasForeignKey("PlaneId");

                    b.HasOne("Flight_Booking_System.Models.Place", "Start")
                        .WithMany("DepartingFlights")
                        .HasForeignKey("StartId");

                    b.Navigation("AirLine");

                    b.Navigation("Destination");

                    b.Navigation("Plane");

                    b.Navigation("Start");
                });

            modelBuilder.Entity("Flight_Booking_System.Models.Passenger", b =>
                {
                    b.HasOne("Flight_Booking_System.Models.Flight", "Flight")
                        .WithMany("Passengers")
                        .HasForeignKey("FlightId");

                    b.HasOne("Flight_Booking_System.Models.Ticket", "Ticket")
                        .WithOne("Passenger")
                        .HasForeignKey("Flight_Booking_System.Models.Passenger", "TicketId");

                    b.Navigation("Flight");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Flight_Booking_System.Models.Place", b =>
                {
                    b.HasOne("Flight_Booking_System.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flight_Booking_System.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Flight_Booking_System.Models.Plane", b =>
                {
                    b.HasOne("Flight_Booking_System.Models.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId");

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("Flight_Booking_System.Models.Seat", b =>
                {
                    b.HasOne("Flight_Booking_System.Models.Ticket", "Ticket")
                        .WithOne("Seat")
                        .HasForeignKey("Flight_Booking_System.Models.Seat", "TicketId");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Flight_Booking_System.Models.State", b =>
                {
                    b.HasOne("Flight_Booking_System.Models.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flight_Booking_System.Models.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");

                    b.Navigation("Country");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Flight_Booking_System.Models.Ticket", b =>
                {
                    b.HasOne("Flight_Booking_System.Models.Flight", "Flight")
                        .WithMany("Tickets")
                        .HasForeignKey("FlightId");

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Flight_Booking_System.Models.ApplicationUSer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Flight_Booking_System.Models.ApplicationUSer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flight_Booking_System.Models.ApplicationUSer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Flight_Booking_System.Models.ApplicationUSer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Flight_Booking_System.Models.AirLine", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("Flight_Booking_System.Models.AirPort", b =>
                {
                    b.Navigation("AirLines");
                });

            modelBuilder.Entity("Flight_Booking_System.Models.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("Flight_Booking_System.Models.Flight", b =>
                {
                    b.Navigation("Passengers");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Flight_Booking_System.Models.Place", b =>
                {
                    b.Navigation("ArrivingFlights");

                    b.Navigation("DepartingFlights");
                });

            modelBuilder.Entity("Flight_Booking_System.Models.Ticket", b =>
                {
                    b.Navigation("Passenger");

                    b.Navigation("Seat");
                });
#pragma warning restore 612, 618
        }
    }
}
